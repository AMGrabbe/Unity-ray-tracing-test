// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
// New skybo texture from HDRI
Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
static const float PI = 3.14159265f;

float2 _PixelOffset;

struct Ray
{
    float3 origin;
    float3 direction;
    // Reflection:
    float3 energy;
};

struct RayIntersection
{
    float3 position;
    float distance;
    float3 normal;
};

Ray CreateRay (float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    return ray;
}

RayIntersection CreateRayIntersection()
{
    RayIntersection hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    return hit;
}

// Calculate origin and direction of the ray
Ray CreateCameraRay(float2 uv)
{
    // Transform camera origin to world space
    float3 origin = mul(_CameraToWorld,  float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

    // Invert perspective projection of view space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    return CreateRay(origin, direction);
}

void IntersectGroundPlane (Ray ray, inout RayIntersection bestHit)
{
    // y because of intersection with ground plane
    float t = -ray.origin.y / ray.direction.y;
    if ( t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);
    }
}

void IntersectSphere(Ray ray, inout RayIntersection bestHit, float4 sphere)
{
    // Sphere: xzs = position, w = readius
    float3 distance = ray.origin - sphere.xyz;
    float p1 = -dot(ray.direction, distance);
    float p2sqr = p1 * p1 - dot(distance, distance) + sphere.w * sphere.w;

    if (p2sqr < 0) return;
    
    float p2 = sqrt(p2sqr);
    // Two ray hit candidates:
    // --> The entry point p1 - p2
    // --> The exit point p1 + p2
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;

    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.xyz);
    }
}

RayIntersection Trace(Ray ray)
{
    RayIntersection bestHit = CreateRayIntersection();
    //IntersectGroundPlane(ray, bestHit);
    for (int i = -10; i < 10; i= i+3 ) IntersectSphere(ray, bestHit, float4(i, 0, 6.0f, 1));
    return bestHit;
}

float3 Shade(inout Ray ray, RayIntersection hit, uint3 id)
{
    if(hit.distance < 1.#INF)
    {
        // To update the energy, we perform an element-wise multiplication with the specular color of the surface.
        // For example, gold has a specular reflectivity of roughly float3(1.0f, 0.78f, 0.34f), so it will reflect 100% of red light, 78% of green light, but only 34% of blue light, giving the reflection its distinct golden tint.
        // Reflectivity valus: https://blog.selfshadow.com/publications/s2015-shading-course/#course_content
        float3 specular = float3(0.6f, 0.6f, 0.6f);

        ray.origin = hit.position + hit.normal + 0.001f;
        ray.direction = reflect(ray.direction, hit.normal);
        ray.energy *= specular;

        return float3(0.0f, 0.0f, 0.0f);
    }
    else
    {
        // Skybox texture calculation

        // Erase ray's energy - sky doesn't reflect anything
        ray.energy = float3(0.0f, 0.0f, 0.0f);
        // Transform cartesian direction vector to spherical coordinates 
        // https://www.youtube.com/watch?v=ZI0f426X-rA
        // https://en.wikipedia.org/wiki/Spherical_coordinate_system#Coordinate_system_conversions
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
    }
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Get dimension of render texture
    uint width, height;
    Result.GetDimensions(width, height);

    // Transform pixel to [-1,1] range
    float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);

    // Get ray of UVs
    Ray ray = CreateCameraRay(uv);
    // Trace & shade
    float3 result = float3(0, 0, 0);
    // 8 bounces of the ray.
    for (int i = 0; i < 20; i++)
    {
        // Imagine a ray that has been reflected once and lost 3/4 of its energy. 
        // Now it travels on and hits the sky, so we only transfer 1/4 of the energy of the sky hit to the pixel. 
        RayIntersection hit = Trace(ray);
        result += ray.energy * Shade(ray, hit, id);

        // If ray ran out of energy.
        if (!any(ray.energy)) break;
    }
    
    Result[id.xy] = float4(result, 1);
}